From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Philip Kelley <philip@thoriumcube.org>
Date: Fri, 6 Oct 2023 23:02:46 +0100
Subject: [PATCH] Add NMSInfernalChunk


diff --git a/src/main/java/com/infernalsuite/iwm/level/NMSInfernalChunk.java b/src/main/java/com/infernalsuite/iwm/level/NMSInfernalChunk.java
new file mode 100644
index 0000000000000000000000000000000000000000..76ca47985bf7a14b185d26c6e22cd8bec1e9e5e4
--- /dev/null
+++ b/src/main/java/com/infernalsuite/iwm/level/NMSInfernalChunk.java
@@ -0,0 +1,69 @@
+package com.infernalsuite.iwm.level;
+
+import com.infernalsuite.iwm.Converter;
+import com.infernalsuite.iwm.api.world.InfernalChunk;
+import com.mojang.logging.LogUtils;
+import net.minecraft.core.Holder;
+import net.minecraft.core.Registry;
+import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.Tag;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.biome.Biomes;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.PalettedContainer;
+import net.minecraft.world.level.chunk.storage.ChunkSerializer;
+import org.jglrxavpok.hephaistos.nbt.NBTCompound;
+import org.slf4j.Logger;
+
+public class NMSInfernalChunk implements InfernalChunk {
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    private static final NBTCompound EMPTY_BLOCK_STATE_PALETTE;
+    private static final NBTCompound EMPTY_BIOME_PALETTE;
+
+    static {
+        {
+            PalettedContainer<BlockState> empty = new PalettedContainer<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(),
+                    PalettedContainer.Strategy.SECTION_STATES, null);
+            Tag tag = ChunkSerializer.BLOCK_STATE_CODEC.encodeStart(NbtOps.INSTANCE, empty).getOrThrow(false, error -> {
+                throw new AssertionError(error);
+            });
+            EMPTY_BLOCK_STATE_PALETTE = (NBTCompound) Converter.convertToNbt(tag);
+        }
+        {
+            Registry<Biome> biomes = MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME);
+            PalettedContainer<Holder<Biome>> empty = new PalettedContainer<>(biomes.asHolderIdMap(),
+                    biomes.getHolderOrThrow(Biomes.PLAINS),
+                    PalettedContainer.Strategy.SECTION_BIOMES,
+                    null);
+            Tag tag = ChunkSerializer.makeBiomeCodec(biomes).encodeStart(NbtOps.INSTANCE, empty).getOrThrow(false, error -> {
+                throw new AssertionError(error);
+            });
+            EMPTY_BIOME_PALETTE = (NBTCompound) Converter.convertToNbt(tag);
+        }
+    }
+
+    private LevelChunk chunk;
+
+    public NMSInfernalChunk(LevelChunk chunk) {
+        this.chunk = chunk;
+    }
+
+    @Override
+    public int getX() {
+        return this.chunk.getPos().x;
+    }
+
+    @Override
+    public int getZ() {
+        return this.chunk.getPos().z;
+    }
+
+
+}
